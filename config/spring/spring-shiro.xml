<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	<!-- ========================================================= Shiro Core 
		Components - Not Spring Specific ========================================================= -->
	<!-- 配置管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionMode" value="native" />
		<property name="realm" ref="jdbcRealm"/>		
	</bean>


	<!-- 配置缓存管理器 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">

		<property name="cacheManagerConfigFile"
			value="classpath:ehcache.xml" />
	</bean>
<!--  多realm
	<bean id="authenticator"
		class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="realms">
			认证器 
			决定了多Realm认证的时候所执行的顺序 
			默认认证方式是AtLeastOneSuccessfulStrategy:只要有一个验证成功即可将返回所有Realm验证成功的结果 
				另外两种方式：FirstSuccessfulStrategy:只返回第一个验证成功的Realm AllSuccessfulStrategy:所有Realm验证成功才算成功，并返回所有的Realm信息 
				配置认证方式是在该bean中配置 
			<list>
				<ref bean="jdbcRealm" />
				<ref bean="SecondRealm" />
			</list>
		</property>
	</bean>-->

	 <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
         <property name="httpOnly" value="true"/>
         <property name="maxAge" value="-1"/> <!--  浏览器关闭时失效此Cookie-->
     </bean>
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="172800"/><!-- 两天 -->
    </bean>
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

	<!-- 配置shiro中的Rleam -->
	<bean id="jdbcRealm" class="Shiro.Realm.ShiroRealm">
		<property name="credentialsMatcher">
			<bean
				class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
				<property name="storedCredentialsHexEncoded" value="true"></property>
			</bean>
		</property>
	</bean>

	<bean id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


	<!-- 配置shiro的注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


<!-- 	<bean id="logoutFilter" -->
<!-- 		class="org.apache.shiro.web.filter.authc.LogoutFilter"> -->
<!-- 		<property name="redirectUrl" value="/Login" /> -->
<!-- 	</bean> -->
<!-- 	<bean id="myLogoutFilter" class="Shiro.Config.MyLogoutFilter"> -->
<!-- 	</bean> -->
	<!-- shiro拦截器的设置 -->
	<bean id="shiroFilter"
		class="Shiro.Config.MyShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/Login" />  <!--没有登录的时候，跳转到这个页面 -->
		<property name="successUrl" value="/home.jsp" />
		<property name="unauthorizedUrl" value="/Login" /> <!-- 当没有权限的时候，跳转到这个url 对应个role属性 -->
		<!-- 
		authc:用户登录 
		anno:匿名访问 
		logout:用户登出 ，是为了清除当前用户的缓存
		roles:角色授权 
		-->
<!-- 		<property name="filters"> -->
<!-- 			<map> -->
<!-- 				<entry key="logout" value-ref="myLogoutFilter" /> -->
<!-- 			</map> -->
<!-- 		</property> -->
		<property name="filterChainDefinitions">
			<value>
				<!-- /home.jsp = authc -->
<!-- 				/Logout = logout -->
<!-- 				/WriteBlog= roles[user] -->
				<!-- 角色必须为admin的时候才可以进入到admin.jsp界面当中 -->
				/admin.jsp = roles[admin]
				/** = anon															
			</value>
		</property>
	</bean>

</beans>
